#include <iostream>
#define MAX_SIZE 100

using namespace std;

template <typename T>
class Stack {
  T* arr;
  int top;
  int capacity;

public:
  Stack(int size = MAX_SIZE) {
    arr = new T[size];
    capacity = size;
    top = -1;
  }

  ~Stack() {
    delete[] arr;
  }

  void push(T x) {
    if (isFull()) {
      resize(capacity * 2);
    }
    arr[++top] = x;
  }

  void pop() {
    if (isEmpty()) {
      cout << "Stack Underflow" << endl;
      return;
    }
    top--;
    if (top < capacity / 4) {
      resize(capacity / 2);
    }
  }

  T peek() {
    if (isEmpty()) {
      cout << "Stack is empty" << endl;
      return T();
    }
    return arr[top];
  }

  bool isEmpty() {
    return top < 0;
  }

  bool isFull() {
    return top >= capacity - 1;
  }

  int size() {
    return top + 1;
  }

  void resize(int newCapacity) {
    T* newArr = new T[newCapacity];
    for (int i = 0; i <= top; i++) {
      newArr[i] = arr[i];
    }
    delete[] arr;
    arr = newArr;
    capacity = newCapacity;
  }
};

int main() {
  Stack<int> s(5);

  s.push(1);
  s.push(2);
  s.push(3);
  s.push(4);
  s.push(5);

  cout << "Stack size: " << s.size() << endl;

  s.push(6);
  cout << "Stack size: " << s.size() << endl;

  cout << "Top element: " << s.peek() << endl;

  s.pop();
  s.pop();

  cout << "Top element: " << s.peek() << endl;

  return 0;
}
